import React, { useState, useEffect } from "react";
import { invoke } from "@tauri-apps/api/core";

function FileExplorerDemo() {
    const [currentPath, setCurrentPath] = useState("");
    const [files, setFiles] = useState([]);
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);

    // „Éõ„Éº„É†„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂèñÂæó
    useEffect(() => {
        const getHomeDir = async () => {
            try {
                const homeDir = await invoke("get_home_directory");
                setCurrentPath(homeDir);
            } catch (err) {
                console.error("„Éõ„Éº„É†„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂèñÂæó„Å´Â§±Êïó:", err);
                setCurrentPath("/");
            }
        };
        getHomeDir();
    }, []);

    // „Éï„Ç°„Ç§„É´„É™„Çπ„Éà„ÇíË™≠„ÅøËæº„Åø
    const loadFiles = async (path) => {
        setLoading(true);
        setError("");

        try {
            const result = await invoke("read_directory", { path });
            setFiles(result);
            setCurrentPath(path);
        } catch (err) {
            console.error("„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:", err);
            setError(
                `„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${err.message || err}`
            );
            setFiles([]);
        } finally {
            setLoading(false);
        }
    };

    // „Éë„Çπ„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
    useEffect(() => {
        if (currentPath) {
            loadFiles(currentPath);
        }
    }, [currentPath]);

    // „Éï„Ç°„Ç§„É´/„Éï„Ç©„É´„ÉÄ„Çí„ÇØ„É™„ÉÉ„ÇØ
    const handleItemClick = (item) => {
        if (item.is_dir) {
            loadFiles(item.path);
        } else {
            // „Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÅØÊÉÖÂ†±„ÇíË°®Á§∫ÔºàÂÆüË£ÖÂèØËÉΩÔºâ
            console.log("„Éï„Ç°„Ç§„É´„ÅåÈÅ∏Êäû„Åï„Çå„Åæ„Åó„Åü:", item);
        }
    };

    // Ë¶™„Éá„Ç£„É¨„ÇØ„Éà„É™„Å∏ÁßªÂãï
    const goToParent = () => {
        const parentPath = currentPath.split("/").slice(0, -1).join("/") || "/";
        loadFiles(parentPath);
    };

    // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    const formatFileSize = (bytes) => {
        if (bytes === 0) return "0 B";
        const k = 1024;
        const sizes = ["B", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    };

    // Êó•‰ªò„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    const formatDate = (timestamp) => {
        return new Date(timestamp * 1000).toLocaleString("ja-JP");
    };

    return (
        <div id="demo-display">
            <div className="demo-content">
                <h2>üìÅ „Éï„Ç°„Ç§„É´„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº„Éá„É¢</h2>
                <p>„Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†„ÇíÊé¢Á¥¢„Åô„Çã„Éá„É¢„Åß„Åô„ÄÇ</p>

                <div className="demo-section">
                    <div className="path-bar">
                        <button
                            onClick={goToParent}
                            disabled={currentPath === "/" || loading}
                        >
                            ‚¨ÜÔ∏è Ë¶™„Éï„Ç©„É´„ÉÄ
                        </button>
                        <span className="current-path">üìÇ {currentPath}</span>
                    </div>

                    {loading && <div className="loading">Ë™≠„ÅøËæº„Åø‰∏≠...</div>}

                    {error && <div className="error">{error}</div>}

                    {!loading && !error && (
                        <div
                            className="file-list"
                            style={{ maxHeight: "400px", overflowY: "auto" }}
                        >
                            {files.length === 0 ? (
                                <div className="empty-folder">
                                    „Éï„Ç©„É´„ÉÄ„ÅåÁ©∫„Åß„Åô
                                </div>
                            ) : (
                                <table className="file-table">
                                    <thead>
                                        <tr>
                                            <th>ÂêçÂâç</th>
                                            <th>„Çµ„Ç§„Ç∫</th>
                                            <th>Êõ¥Êñ∞Êó•ÊôÇ</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {files.map((item, index) => (
                                            <tr
                                                key={index}
                                                className={`file-item ${
                                                    item.is_dir
                                                        ? "directory"
                                                        : "file"
                                                }`}
                                                onClick={() =>
                                                    handleItemClick(item)
                                                }
                                            >
                                                <td className="file-name">
                                                    <span className="file-icon">
                                                        {item.is_dir
                                                            ? "üìÅ"
                                                            : "üìÑ"}
                                                    </span>
                                                    {item.name}
                                                </td>
                                                <td className="file-size">
                                                    {item.is_dir
                                                        ? "-"
                                                        : formatFileSize(
                                                              item.size || 0
                                                          )}
                                                </td>
                                                <td className="file-date">
                                                    {item.modified
                                                        ? formatDate(
                                                              item.modified
                                                          )
                                                        : "-"}
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            )}
                        </div>
                    )}
                </div>

                <div className="demo-info">
                    <h3>üìã ‰ΩøÁî®ÊñπÊ≥ï</h3>
                    <ul>
                        <li>„Éï„Ç©„É´„ÉÄ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÁßªÂãï</li>
                        <li>„ÄåË¶™„Éï„Ç©„É´„ÉÄ„Äç„Éú„Çø„É≥„Åß‰∏ä‰Ωç„Éá„Ç£„É¨„ÇØ„Éà„É™„Å∏</li>
                        <li>„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíË°®Á§∫Ôºà„Çµ„Ç§„Ç∫„ÄÅÊõ¥Êñ∞Êó•ÊôÇÔºâ</li>
                    </ul>
                </div>
            </div>
        </div>
    );
}

export default FileExplorerDemo;
